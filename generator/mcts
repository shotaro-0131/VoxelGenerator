"""
reference 
    https://github.com/pbsinclair42/MCTS
"""
class StateInterface():
    def getCurrentPlayer(self):
        # 1 for maximiser, -1 for minimiser
        raise NotImplementedError()

    def getPossibleActions(self):
        raise NotImplementedError()

    def takeAction(self, action):
        raise NotImplementedError()

    def isTerminal(self):
        raise NotImplementedError()

    def getReward(self):
        # only needed for terminal states
        raise NotImplementedError()

    def __eq__(self, other):
        raise NotImplementedError()


class ActionInterface():
    def __eq__(self, other):
        raise NotImplementedError

    def __hash__(self):
        raise NotImplementedError()

class InitAtomAdd(ActionInterface):
  def __init__(self, position, atom_type):
    self.position = position
    self.atom_type = atom_type

  def __eq__(self, other):
    return self.__class__ == other.__class__ and self.positon == other.positon and self.atom_type == other.atom_type

  def __hash__(self):
    return hash((self.position[0], self.position[1], self.position[2], self.atom_type, self.__class__))

class AtomAdd(ActionInterface):
  def __init__(self, position, atom_type, selected_index, bond, connected_index=None, connected_bond=None):
    self.position = position
    self.selected_index = selected_index
    self.atom_type = atom_type
    self.bond = bond
    
    self.connected_index = connected_index
    self.connected_bond = connected_bond

  def __eq__(self, other):
    return self.__class__ == other.__class__ and self.position == other.position and self.atom_type == other.atom_type and self.selected_index == other.selected_index and self.bond == other.bond

  def __hash__(self):
    return hash((self.position[0], self.position[1], self.position[2], self.atom_type, self.bond, self.__class__, self.connected_index, self.connected_bond))

import numpy as np
import itertools

from copy import deepcopy
import math
class BondType:
    def __init__(self, atoms, length, hands):
        self.atoms = atoms
        self.min_len = (length-0.25*math.sqrt(3))
        self.max_len = (length+0.25*math.sqrt(3))
        self.hands = hands
        self.valid = [(dx, dy, dz) for dx, dy, dz in itertools.product(np.arange(-1*2,2+1,1), repeat=3) if 0.25*dx*dx + 0.25*dy*dy + 0.25*dz*dz >= self.min_len*self.min_len and 0.25*dx*dx + 0.25*dy*dy + 0.25*dz*dz <= self.max_len*self.max_len]
        self.invalid = [(dx, dy, dz) for dx, dy, dz in itertools.product(np.arange(-1*2,2+1,1), repeat=3) if 0.25*dx*dx + 0.25*dy*dy + 0.25*dz*dz < self.min_len*self.min_len]
    def get(self, atom):
        if atom == self.atoms[0]:
            return self.atoms[1]
        else:
            return self.atoms[0]
    def isin(self, dist):
        return self.min_len < dist and self.max_len > dist
    def isOut(self, dist):
        return self.max_len < dist 
        
CC1 = BondType([0,0], 1.54, 1)
CC2 = BondType([0,0], 1.34, 2)
CC3 = BondType([0,0], 1.2, 3)
CO1 = BondType([0,1], 1.43, 1)
CO2 = BondType([0,1], 1.22, 2)
CN1 = BondType([0,2], 1.45, 1)
CN2 = BondType([0,2], 1.28, 2)
CN3 = BondType([0,2], 1.16, 3)

# BondTypes=[CC1, CC2, CC3, CO1, CO2, CN1, CN2, CN3]
BondTypes=[CC1,CC2,CO1,CO2,CN1,CN2]
class GridState(StateInterface):
  def __init__(self):
#     self.voxel = np.random.uniform(0.0,1.0, (4, 32, 32, 32))
    self.voxel = np.load("ace_pred_np.npy")
    self.voxel = self.standard(self.voxel)
    self.voxel[2] *= 1
    self.current_player = 1
    self.state_voxel = np.zeros((4,32,32,32))
    self.state_index = [[e[0] for e in np.where(self.voxel==np.max(self.voxel))]]
    self.have_bond = [0]
    self.state_voxel[self.state_index[0][0],self.state_index[0][1],self.state_index[0][2],self.state_index[0][3]] = 1
    self.min_len = 1.4*2
    self.max_len = (1.5+0.25*math.sqrt(3))*2
    self.next_atom = {0: [0, 1, 2, 3], 1:[0], 2:[0], 3:[0]}
    self.valid = [(dx, dy, dz) for dx, dy, dz in itertools.product(np.arange(-1*2,2+1,1), repeat=3) if dx*dx + dy*dy + dz*dz >= self.min_len*self.min_len and dx*dx + dy*dy + dz*dz <= self.max_len*self.max_len]
    self.invalid = [(dx, dy, dz) for dx, dy, dz in itertools.product(np.arange(-1*2,2+1,1), repeat=3) if dx*dx + dy*dy + dz*dz < self.min_len*self.min_len]
    self.pre_reward = 0
    self.bondTypes = [[x for x in BondTypes if t in x.atoms] for t in [0,1,2,3]]
    self.disable_index = [(self.state_index[0][0]+dx, self.state_index[0][1]+dy, self.state_index[0][2]) for dx, dy, dz in self.invalid]
    self.invalid = [(dx, dy, dz) for dx, dy, dz in itertools.product(np.arange(-1*2,2+1,1), repeat=3) if dx*dx + dy*dy + dz*dz < self.min_len*self.min_len]
    self.invalid2 = [(dx, dy, dz) for dx, dy, dz in itertools.product(np.arange(-1*2,2+1,1), repeat=3) if dx*dx + dy*dy + dz*dz < (self.max_len)*(self.max_len)]
    self.available = [[e[0] for e in np.where(self.voxel==np.max(self.voxel))]]
    self.connected_atoms = [[]]
#     for d in self.disable_index:
#       x, y, z = d
#       self.state_voxel[:,x,y,z] = -1
    self.isVisited = False
    # self.children = []  
    # for action in self.getPossibleActions():
    #   self.children.append(self.takeAction(action))

  def getCurrentPlayer(self):
    return self.current_player

  def getPossibleActions(self):
    possibleActions = []
    for target, state in enumerate(self.state_index):
      t, x, y, z = state
    
      for bondType in self.bondTypes[t]:
          if  bondType.hands + self.have_bond[target] > 3 or (t==1 and bondType.hands + self.have_bond[target] > 2):
            continue
            
          for dx, dy, dz in bondType.valid:
            new_x = dx + x
            new_y = dy + y
            new_z = dz + z
            if (new_x, new_y, new_z) in self.disable_index:
              continue
#             for atom in self.
#             if (new_x, new_y, new_x) in self.
#             for atom_index in self.connected_atoms:
#               self.have_bond[atom_index]
#               self.state_index[atom_index]
            connected_atoms = {}
            is_invalid_flag = False
            for index, (atom, bond) in enumerate(zip(self.state_index, self.have_bond)):
              if index == target:
                continue
              t2, x2, y2, z2 = atom
              dist = math.sqrt((new_x-x2)*(new_x-x2)+(new_y-y2)*(new_y-y2)+(new_z-z2)*(new_z-z2))/2
              if dist < 1.6:
                if (t2 == 2 and t == 1) or (t == 2 and t2 == 1) or (t == 1 and t2 == 1) or (t == 2 and t2 == 2):
                    is_invalid_flag = True
                    break
              for b2 in self.bondTypes[t2]:
                if b2.get(t2) != t:
                  continue
                if b2.isOut(dist):
                  continue
                if b2.isin(dist):
                  connected_atoms[index] = [b2, bond]
#                   print(dist, b2.min_len, b2.max_len)
            if len(connected_atoms.keys()) > 1 or is_invalid_flag:
                continue
                
            connected_index = None
            connected_hands = None
            if len(connected_atoms.keys()) == 1:
                connected_index = list(connected_atoms.keys())[0]
                connected_bond, connected_have_atoms = connected_atoms[connected_index]
                connected_hands = connected_bond.hands
#                 print(connected_hands, connected_bond.hands, connected_index, target)
                if connected_bond.hands + connected_have_atoms > 3 or (connected_bond.get(t)==1 and connected_bond.hands + connected_have_atoms > 2):
                    continue
                if connected_bond.hands + bondType.hands > 3 or (bondType.get(t)==1 and connected_bond.hands + bondType.hands > 2):
                    continue
            if new_x >= 0 and new_y >= 0 and new_z >= 0 and new_x < 32 and new_y < 32 and new_z < 32:
              if self.voxel[bondType.get(t), new_x, new_y, new_z] > 0:
                  possibleActions.append(AtomAdd((new_x, new_y, new_z), bondType.get(t), target, bondType.hands, connected_index, connected_hands))
    return possibleActions
    
  def min_max(self,voxel):
    for i in range(voxel.shape[0]):
        max_num = np.max(voxel[i])
        voxel[i] = voxel[i]/max_num
    return voxel

  def standard(self, voxel):
        for i in range(voxel.shape[0]):
            voxel[i] = (voxel[i] - np.mean(voxel[i].flatten()))/np.std(voxel[i].flatten())
        return voxel
    
  def findUnvisitedChild(self):
    return [c for c in self.children if not c.isVisited]

  def takeAction(self, action):
    newState = deepcopy(self)
    newState.state_voxel[action.atom_type, action.position[0], action.position[1], action.position[2]] = 1
    newState.state_index.append([action.atom_type, action.position[0], action.position[1], action.position[2]])
    newBond = action.bond
    if action.connected_index != None:
        newState.have_bond[action.connected_index] = newState.have_bond[action.connected_index] + action.connected_bond 
        newBond = newBond + action.connected_bond
    if action.bond>=3 or (action.atom_type==1 and action.bond>=2):
        disable_index =  [(action.position[0]+dx, action.position[1]+dy, action.position[2]+dz) for dx, dy, dz in self.invalid2 if action.position[0]+dx>=0 and action.position[1]+dy>=0 and action.position[2]+dz>=0 and action.position[0]+dx < 32 and action.position[1]+dy < 32 and action.position[2]+dz < 32]
            
    else:
        disable_index =  [(action.position[0]+dx, action.position[1]+dy, action.position[2]+dz) for dx, dy, dz in self.invalid if action.position[0]+dx>=0 and action.position[1]+dy>=0 and action.position[2]+dz>=0 and action.position[0]+dx < 32 and action.position[1]+dy < 32 and action.position[2]+dz < 32]
        if action.bond+self.have_bond[action.selected_index]>=3 or (action.bond+newState.have_bond[action.selected_index]>=2 and newState.state_index[action.selected_index][0] ==1):
            s_pos = newState.state_index[action.selected_index]
            disable_index.extend([(s_pos[1]+dx, s_pos[2]+dy, s_pos[3]+dz) for dx, dy, dz in self.invalid2 if s_pos[1]+dx>=0 and s_pos[2]+dy>=0 and s_pos[3]+dz>=0 and s_pos[1]+dx < 32 and s_pos[2]+dy < 32 and s_pos[3]+dz < 32])
    
#     disable_index =  [(action.position[0]+dx, action.position[1]+dy, action.position[2]+dz) for dx, dy, dz in self.invalid if action.position[0]+dx>=0 and action.position[1]+dy>=0 and action.position[2]+dz>=0 and action.position[0]+dx < 32 and action.position[1]+dy < 32 and action.position[2]+dz < 32]
    
    newState.disable_index.extend(disable_index) 
    newState.disable_index = list(set(newState.disable_index))
    newState.current_player = self.current_player
    newState.have_bond[action.selected_index] = newState.have_bond[action.selected_index] + action.bond
    newState.have_bond.append(newBond)
    newState.pre_reward=self.getReward()
#     print(len(newState.getPossibleActions()), action.selected_index, action.connected_index, newState.have_bond)
#     newState.connected_atoms[action.selected_index].extend(len(newState.state_index)) 
#     newState.connected_atoms.append([action.selected_index])
#     for d in disable_index:
#       x, y, z = d
#       newState.state_voxel[:,x,y,z] = -1
    for s in newState.state_index:
      t, x, y, z = s
      newState.state_voxel[t, x, y, z] = 1
#     print(len(newState.state_index), newState.have_bond)
    return newState

  def isTerminal(self):
    if np.min(self.voxel[self.state_index[-1][0], self.state_index[-1][1], self.state_index[-1][2], self.state_index[-1][3]]) == 0:
      return True
    if len(self.state_index) == 40:
      return True
    if 0 > self.getReward():
      return True
    if len(self.getPossibleActions()) == 0:
      return True
    return False

  def getReward(self):
    # only needed for terminal states
    return  np.sum(self.voxel*self.state_voxel)
    raise NotImplementedError()

  def __eq__(self, other):
    return self.__class__ == other.__class__ and self.state_index == other.state_index
    
from mcts import mcts
import subprocess

if __name__ == "__main__":

    from utils.preprocess import *
    state = GridState()
    searcher = mcts(iterationLimit=100)
    pre_reward = -1
    reward = 0
    count = 0
    action = None
    # while pre_reward < reward:
    while len(state.state_index) < 39 and len(state.getPossibleActions()) > 0:
        # pre_reward = reward
        if action != None:
            state = state.takeAction(action)  
        to_xyz_file(voxel_to_xyz(state.state_voxel, 0.5, [0.02, 0.02, 0.02, 0.02]), f"trajectory/test{count}.xyz")
        subprocess.run(["obabel",f"trajectory/test{count}.xyz","-O",f"trajectory/test{count}.pdb"]) 
        subprocess.run(["rm",f"trajectory/test{count}.xyz"]) 
        print(state.voxel[np.where(state.state_voxel>0)])
        print(state.state_index)
        action = searcher.search(initialState=state)
        #   reward = bestAction["expectedReward"]
        pre_reward = state.getReward()
        print(reward, pre_reward)

        #   action = bestAction["action"]
        count+=1
  